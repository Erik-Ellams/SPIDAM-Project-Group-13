#from test import *
import numpy as np
import matplotlib.pyplot as plt
from scipy.io import wavfile
from pydub import *


'''def calculate_rt60(self):
    try:
        energy = np.cumsum(self.audio_data[::-1] ** 2)[::-1]
        t60 = -60 / np.polyfit(np.log10(energy), np.arange(len(energy)), 1)[0]
        self.rt60['full_band'] = t60
    except Exception as e:
        raise ValueError(f"Error calculating RT60: {e}")


wav_file_name = "16bit4chan.wav"
sample_rate, data = wavfile.read(wav_file_name)

calculate_rt60(wav_file_name)'''


# Load the audio file
audio = AudioSegment.from_file("16bit4chan.wav") #m1
wav_fname = '16bit4chan.wav' #m2

#Method 1
# Access raw audio data
raw_data = audio.raw_data
print("(m1)Raw data:", raw_data)

#Method 1
# Access other properties like channels, frame rate, etc.
channels = audio.channels
print("\n(m1)Channels:", channels)

#Method 1
frame_rate = audio.frame_rate
print("\n(m1)Frame Rate:", frame_rate)

#Method 2
samplerate, data = wavfile.read(wav_fname)

#Method 2
# Get channels
m2_chan = data.shape[len(data.shape) - 1]
print("\n(m2) Channels:", m2_chan)

#Method 2
m2_samplerate = samplerate
print("\n(m2) Channels:", m2_samplerate)

start_time = 1000
end_time = 1010
#average_freq =
#rt60 is 3 * rt20
#reverb will be the absolute value of rt60 rounded to 2
